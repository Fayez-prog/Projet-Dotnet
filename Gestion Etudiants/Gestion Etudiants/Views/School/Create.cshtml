@model Gestion_Etudiants.Models.School

@{
    ViewData["Title"] = "Créer un établissement";
}

<div class="container-fluid">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">@ViewData["Title"]</h1>
        <a asp-action="Index" class="btn btn-secondary btn-icon-split">
            <span class="icon text-white-50">
                <i class="fas fa-arrow-left"></i>
            </span>
            <span class="text">Retour à la liste</span>
        </a>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3 bg-success text-white">
            <h6 class="m-0 font-weight-bold">Nouvel établissement</h6>
        </div>
        <div class="card-body">
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <h5><i class="fas fa-exclamation-triangle"></i> Erreurs de validation :</h5>
                    <ul>
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }

            <form asp-action="Create" class="needs-validation" novalidate>
                <div class="form-group row">
                    <label asp-for="SchoolName" class="col-sm-3 col-form-label font-weight-bold"></label>
                    <div class="col-sm-9">
                        <input asp-for="SchoolName" class="form-control" required />
                        <span asp-validation-for="SchoolName" class="text-danger"></span>
                        <div class="invalid-feedback">
                            Veuillez saisir le nom de l'établissement.
                        </div>
                    </div>
                </div>

                <div class="form-group row">
                    <label asp-for="SchoolAdress" class="col-sm-3 col-form-label font-weight-bold"></label>
                    <div class="col-sm-9">
                        <textarea asp-for="SchoolAdress" class="form-control" rows="3" required></textarea>
                        <span asp-validation-for="SchoolAdress" class="text-danger"></span>
                        <div class="invalid-feedback">
                            Veuillez saisir l'adresse de l'établissement.
                        </div>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-sm-9 offset-sm-3">
                        <button type="submit" class="btn btn-primary btn-icon-split">
                            <span class="icon text-white-50">
                                <i class="fas fa-save"></i>
                            </span>
                            <span class="text">Enregistrer</span>
                        </button>
                        <a asp-action="Index" class="btn btn-secondary btn-icon-split">
                            <span class="icon text-white-50">
                                <i class="fas fa-times"></i>
                            </span>
                            <span class="text">Annuler</span>
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
}